@model Entities.Reservation

@{
    ViewBag.Title = "MakeReservation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>MakeReservation</h2>

<form id="kati" method="post">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.RoomId, Model.RoomId)
    @Html.HiddenFor(m => m.Room, Model.Room)
    <h6>You are making a reservation for room @Model.Room.Title</h6>
    <div class="form-group">
        @Html.LabelFor(m => m.FirstName)
        @Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter firstname" } })
        @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(t => t.LastName)
        @Html.EditorFor(t => t.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter lastname" } })
        @Html.ValidationMessageFor(t => t.LastName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.GameDate)
        @Html.EditorFor(m => m.GameDate, new { HtmlAttributes = new { @class = "form-control", type = "date" } })
        @Html.ValidationMessageFor(m => m.GameDate, "", new { @class = "text-danger" })
    </div>
    <div>
        @Html.DropDownListFor(m => m.GameTime, ViewBag.HourList as IEnumerable<SelectListItem>)
        @Html.ValidationMessageFor(m => m.GameTime, "", new { @class = "text-danger" })
    </div>
    <br />
    <br />
    <div>
        @Html.LabelFor(m => m.NumberOfPlayers)
        @Html.DropDownListFor(m => m.NumberOfPlayers, Enumerable.Range(2, Model.Room.Capacity - 1).Select(i => new SelectListItem
        {
            Text = i.ToString() + " Players / "
       + (Model.NumberOfPlayers > 2 ? (Model.Room.StartingPricePerPerson * i) - (Model.Room.StartingPricePerPerson * i * Model.Room.DiscountPerPerson)
                  : Model.Room.StartingPricePerPerson * i) + "EUR",
            Value = i.ToString()
        }))
        @Html.ValidationMessageFor(m => m.NumberOfPlayers, "", new { @class = "text-danger" })
    </div>
    <br />
    <br />
    <input class="btn btn-success" type="submit" value="Proceed to Checkout" />
    <!--<a--> @*onclick="$('form').submit()"*@
    <!--href='@Url.Action("PaymentWithPaypal", "Reservation")'>
        <img src='@Url.Content("https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif")'
             Width="145" AlternateText="Check out with PayPal"
             BackColor="Transparent" BorderWidth="0" />

    </a>-->
    @*<input type="submit" src="~/Controllers/ReservationController.cs"/>*@


    <input type="submit" onclick="location.href='@Url.Action("PaymentWithPaypal", "Paypal")'" value="plhrwne papara" />

    <input class="btn btn-warning" type="reset" value="Clear" />
</form>

<div id="smart-button-container">
    <div style="text-align: center;">
        <div style="margin-bottom: 1.25rem;">
            <p></p>
            <select id="item-options"><option value="" price=""> -  USD</option></select>
            <select style="visibility: hidden" id="quantitySelect"></select>
        </div>
        <div id="paypal-button-container"></div>
    </div>
</div>
<script src="https://www.paypal.com/sdk/js?client-id=sb&enable-funding=venmo&currency=USD" data-sdk-integration-source="button-factory"></script>
<script>
    function initPayPalButton() {
        var shipping = 0;
        var itemOptions = document.querySelector("#smart-button-container #item-options");
        var quantity = parseInt();
        var quantitySelect = document.querySelector("#smart-button-container #quantitySelect");
        if (!isNaN(quantity)) {
            quantitySelect.style.visibility = "visible";
        }
        var orderDescription = '';
        if (orderDescription === '') {
            orderDescription = 'Item';
        }
        paypal.Buttons({
            style: {
                shape: 'rect',
                color: 'gold',
                layout: 'vertical',
                label: 'paypal',

            },
            createOrder: function (data, actions) {
                var selectedItemDescription = itemOptions.options[itemOptions.selectedIndex].value;
                var selectedItemPrice = parseFloat(itemOptions.options[itemOptions.selectedIndex].getAttribute("price"));
                var tax = (0 === 0 || false) ? 0 : (selectedItemPrice * (parseFloat(0) / 100));
                if (quantitySelect.options.length > 0) {
                    quantity = parseInt(quantitySelect.options[quantitySelect.selectedIndex].value);
                } else {
                    quantity = 1;
                }

                tax *= quantity;
                tax = Math.round(tax * 100) / 100;
                var priceTotal = quantity * selectedItemPrice + parseFloat(shipping) + tax;
                priceTotal = Math.round(priceTotal * 100) / 100;
                var itemTotalValue = Math.round((selectedItemPrice * quantity) * 100) / 100;

                return actions.order.create({
                    purchase_units: [{
                        description: orderDescription,
                        amount: {
                            currency_code: 'USD',
                            value: priceTotal,
                            breakdown: {
                                item_total: {
                                    currency_code: 'USD',
                                    value: itemTotalValue,
                                },
                                shipping: {
                                    currency_code: 'USD',
                                    value: shipping,
                                },
                                tax_total: {
                                    currency_code: 'USD',
                                    value: tax,
                                }
                            }
                        },
                        items: [{
                            name: selectedItemDescription,
                            unit_amount: {
                                currency_code: 'USD',
                                value: selectedItemPrice,
                            },
                            quantity: quantity
                        }]
                    }]
                });
            },
            onApprove: function (data, actions) {
                return actions.order.capture().then(function (orderData) {

                    // Full available details
                    console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));

                    // Show a success message within this page, e.g.
                    const element = document.getElementById('paypal-button-container');
                    element.innerHTML = '';
                    element.innerHTML = '<h3>Thank you for your payment!</h3>';

                    // Or go to another URL:  actions.redirect('thank_you.html');

                });
            },
            onError: function (err) {
                console.log(err);
            },
        }).render('#paypal-button-container');
    }
    initPayPalButton();
</script>


<br />
<br />
<br />
<a class="btn btn-info" href="/Room/Index">Go Back</a>
